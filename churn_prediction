# This is an example of using tensorflow to predict the churn rate for a group of customers

# Set up environment, import and view raw data
import pandas as pd
from sklearn.model_selection import train_test_split

df = pd.read_csv('Tensorflow-in-10-Minutes/Churn.csv')

X = pd.get_dummies(df.drop(['Churn', 'Customer ID'], axis=1))
y = df['Churn'].apply(lambda x: 1 if x=='Yes' else 0)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

X_train.head()

y_train.head()

# Import Dependencies
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score

# Build and Compile Model
model = Sequential()
model.add(Dense(units = 32, activation='relu', input_dim=len(X_train.columns)))
model.add(Dense(units = 64, activation='relu'))
model.add(Dense(units = 1, activation='sigmoid'))

# Compile Model
model.compile(loss='binary_crossentropy', optimizer='sgd', metrics='accuracy')

# Fit, Predict, and Evaluate
model.fit(X_train, y_train, epochs=200, batch_size=32)

y_hat = model.predict(X_test)
y_hat = [0 if val <0.5 else 1 for val in y_hat]

y_hat

accuracy_score(y_test, y_hat)

# Save model and be able to reload from memory
model.save('churn_model')

# delete and then reload model from memory
del model

model = load_model('churn_model')

